
server.port=8063



spring.application.name=demo-consumer
dubbo.scan.base-packages=com.dudemo.dudemoconsumer

dubbo.protocol.name=dubbo
dubbo.protocol.port=20880
#单注册中心注册方式
#dubbo.registry.address=zookeeper://47.100.58.201:2181
#配置中心  如果不设置这个 其注册中心地址要设置zookeeper://开头  如果不设置会默认zookeeper但将只作服务治理用途。
dubbo.registry.protocol=zookeeper
#多注册中心注册方式  这里不一定要设置成registry1和2 名字可以自己定义  是这个定义注册中心的名字
dubbo.registries.registry1.address=zookeeper://47.100.58.201:2181
dubbo.registries.registry2.address=zookeeper://47.100.58.201:2182
#这样应该也是可以的 dubbo.registries.address=zookeeper://47.100.58.201:2182|47.100.58.201:2181
#设置默认的注册中心
dubbo.registries.registry2.default=true
#dubbo.protocol.dispatcher=
#关闭所有服务的启动时检查  防止有的服务没有注入成功报错 程序启动不开的情况 如果@Reference有改成true则不受该设置影响
#dubbo.consumer.check=false
#强制改变所有@Reference的值，就算有声明特殊又改为true也不生效
#dubbo.reference.check=false
#设置服务链接失败重连次数 默认为2
#dubbo.consumer.retries=2
#集群容错模式 参照服务端配置注解
#dubbo.consumer.cluster=
#消费者端设置的负载均衡策略 应该只需要设置一端就可以了
#dubbo.consumer.loadbalance=

#禁止订阅服务 只注册
#dubbo.registry.subscribe=false

#结果缓存 lru 最少使用原则 最热数据被缓存 jcache (这个没懂意思)
# threadlocal 当前线程缓存，比如一个页面渲染，用到很多 portal，每个 portal 都要去查用户信息，通过线程缓存，可以减少这种多余访问。
#dubbo.consumer.cache=lru

#  本地伪装 设置当服务提供方全部挂掉后，客户端不抛出异常，而是通过 Mock 数据返回授权失败。
#return null ：null  return empty ：代表空，基本类型的默认值，或者集合类的空值  return true ：true  return false ：false  return JSON 格式: 反序列化 JSON 所得到的对象
#throw来返回一个 Exception 对象，作为 Mock 的返回值。 当调用出错时，抛出指定的 Exception：throw com.foo.MockException
#force: 代表强制使用 Mock 行为，在这种情况下不会走远程调用。fail: 与默认行为一致，只有当远程调用发生错误时才使用 Mock 行为。force: 和 fail: 都支持与 throw 或者 return 组合使用。
#dubbo.consumer.mock="return null"

#并发控制，客户端最大并发执行数量 服务端也可以设置 均设置时客户端优先级高
#dubbo.consumer.actives=10

#延迟链接 延迟连接用于减少长连接数。当有调用发起时，再创建长连接 只对长连接dubbo协议有效
#dubbo.consumer.lazy=true

#粘滞连接 粘滞连接用于有状态服务，尽可能让客户端总是向同一提供者发起调用，除非该提供者挂了，再连另一台。
#自动开启延迟连接 减少长连接数 支持方法级别的粘滞连接，如果你知道怎么在springboot上设置请告诉我，我不会非XML设置 非常烦XML设置
dubbo.consumer.sticky=true


spring.main.allow-bean-definition-overriding=true



